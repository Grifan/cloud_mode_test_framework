from utils.helpers.fake_data import fake
from utils.helpers.validator import Verify
from utils.helpers.loger import log


def test_post_user(pet_store_api, create_user):
    """POST. Create a new user with all fields (id predefined)"""
    response, body = create_user
    Verify.equals(200, response.status, "POST a new user response status code is incorrect")
    Verify.dict_contains_key("message", response.json,
                             "Response json does not contain expected 'message' field")
    Verify.equals(response.json["message"], str(body["id"]),
                  f"'message' field not contains expected id{body['id']}")

    payload = pet_store_api.get_user_by_name(name=body["username"])
    Verify.equals(200, payload.status, "GET created user response status code is incorrect")
    Verify.equals(response.json["message"], str(payload.json["id"]),
                  "Received user's id is incorrect")


def test_post_user_with_only_name(pet_store_api, create_custom_user):
    """POST. Create a new user with only 'username' filed"""
    body = {"username": fake.property_id()}
    log.info("POST a new user with only 'username' filed")
    response = create_custom_user(body)
    Verify.equals(200, response.status, "POST a new user response status code is incorrect")
    Verify.dict_contains_key("message", response.json,
                             "Response json does not contain expected 'message' field")

    created_user_id = response.json["message"]

    get_response = pet_store_api.get_user_by_name(name=body["username"])
    Verify.equals(200, get_response.status, "GET created user response status code is incorrect")
    Verify.dict_contains_all_keys(get_response.json, ["id", "username", "userStatus"],
                                  "Response json does not contain all expected fields")

    Verify.equals(created_user_id, str(get_response.json["id"]), "Autogenerated user's id is incorrect")
    Verify.equals(body["username"], str(get_response.json["username"]), "Received username is incorrect")
    Verify.equals(0, get_response.json["userStatus"], "Autogenerated userStatus is incorrect")


def test_post_rewrite_user(pet_store_api, create_user, get_user_payload, create_custom_user):
    """POST. Create a user and rewrite its fields values (except id and username)"""
    _response, body = create_user
    Verify.equals(200, _response.status, "POST a new user response status code is incorrect")

    new_user_body = get_user_payload
    new_user_body["id"] = body["id"]
    new_user_body["username"] = body["username"]

    log.info("POST updated user")
    rewrite_response = create_custom_user(new_user_body)
    Verify.equals(200, rewrite_response.status, "POST rewrite user response status code is incorrect")
    Verify.equals(rewrite_response.json["message"], str(_response.json["message"]),
                  "'message' field not contains id of rewritten user")

    log.info("Verify that user was overwritten with updated fields")
    response = pet_store_api.get_user_by_name(name=new_user_body["username"])
    Verify.equals(200, response.status, "GET rewritten user response status code is incorrect")
    Verify.equals(response.json, new_user_body,
                  "Received user's id is incorrect")


def test_post_array_user(pet_store_api, get_user_payloads):
    """POST. Create an array users"""
    bodies = get_user_payloads(3)
    response = pet_store_api.bulk_post_user(bodies, use_array=True)
    Verify.equals(200, response.status, "POST array users response status code is incorrect")

    log.info("Verify if all users were created and available by its 'username' parameter")
    for usr_payload in bodies:
        payload = pet_store_api.get_user_by_name(name=usr_payload["username"])
        Verify.equals(200, payload.status, "GET created user response status code is incorrect")
        Verify.equals(usr_payload, payload.json,
                      "Received user's payload is incorrect incorrect")


def test_post_list_user(pet_store_api, get_user_payloads):
    """POST. Create a list users"""
    bodies = get_user_payloads(2)
    response = pet_store_api.bulk_post_user(bodies, use_array=True)
    Verify.equals(200, response.status, "POST list users response status code is incorrect")

    log.info("Verify if all users were created and available by its 'username' parameter")
    for usr_payload in bodies:
        payload = pet_store_api.get_user_by_name(name=usr_payload["username"])
        Verify.equals(200, payload.status, "GET created user response status code is incorrect")
        Verify.equals(usr_payload, payload.json,
                      "Received user's payload is incorrect incorrect")
