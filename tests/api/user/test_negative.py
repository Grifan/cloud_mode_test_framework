import pytest

from entities.user import new_user_payload
from utils.helpers.fake_data import fake
from utils.helpers.validator import Verify
from utils.helpers.loger import log


def test_get_not_existed_user_by_name(pet_store_api):
    """GET. Read not existed user by its name"""
    user_name = fake.property_id()
    response = pet_store_api.get_user_by_name(name=user_name)
    Verify.equals(response.status, 404, "Status code")
    Verify.dict_contains_all_keys(response.json, ["code", "type", "message"],
                                  "Response json does not contain all expected fields")
    Verify.equals(response.json["code"], 1, "'code' field value is incorrect")
    Verify.equals(response.json["type"], "error", "'type' field  value is incorrect")
    Verify.equals(response.json["message"], "User not found", "'message' field value is incorrect")


# todo backend does not validate username field. It makes possible to create such users (GET by name request
#  returns user), but there is no way to delete them (DELETE response status will be 404)
#  No username length validation (here could be used status code: 413 - Payload Too Large)

@pytest.mark.parametrize("name_value", [None, " ", 3, fake.letters_numbers(500)])
def test_post_user_with_invalid_name(get_user_payload, name_value, create_custom_user):
    """POST. Create a new user with invalid username"""
    body = get_user_payload
    body["username"] = name_value
    response = create_custom_user(body)
    Verify.equals(400, response.status,
                  f"POST a new user with 'username'='{name_value}' response status code is incorrect")


def get_user_fields():
    payload = new_user_payload()
    fields = list(payload.keys())
    codes = [200, 400, 200, 200, 200, 200, 200]
    return list(zip(fields, codes))


# todo backend creates user even if body does not have 'username'. This field should be required
#  Also 'id' field should be excluded from user scheme and always set as autoincrement filed

@pytest.mark.parametrize("field, exp_code", get_user_fields())
def test_post_user_with_missed_field(pet_store_api, get_user_payload, field, exp_code, create_custom_user):
    """POST. Create a new user with missed field in body """
    body = get_user_payload
    body.pop(field)
    log.info(f"POST a new user without '{field}' field")
    response = create_custom_user(body)
    Verify.equals(exp_code, response.status, "Response status code is incorrect")

    log.info("Verify created user (by GET request)")
    get_usr_response = pet_store_api.get_user_by_name(name=body.get("username", ''))
    Verify.equals(200, get_usr_response.status, "GET created user response status code is incorrect")
    Verify.equals(response.json["message"], str(get_usr_response.json["id"]),
                  "Received user's id is incorrect")


# todo in fact this is allowed case, but there is no reason of such entity creation. Should be deprecated
def test_post_user_with_only_id(pet_store_api, create_custom_user):
    """POST. Create a new user with only 'id' filed"""
    body = {"id": fake.number(10)}
    log.info("POST a new user with only 'id' filed")
    response = create_custom_user(body)
    Verify.equals(400, response.status,
                  "Backend does not handle cases when only 'id' was provided")


# todo in fact this is allowed case, but backend should deprecate such entities creation
def test_post_user_with_extra_field(pet_store_api, get_user_payload, create_custom_user):
    """POST. Create a user with extra field (zipCode)"""
    new_user_body = get_user_payload
    new_user_body["zipCode"] = fake.number(5)

    log.info("POST user with extra field (zipCode)")
    response = create_custom_user(new_user_body)
    Verify.equals(400, response.status, "Backend does not validate received entity bodies")


# todo in fact this is allowed case, but backend should deprecate such entities creation
def test_post_user_with_large_id(pet_store_api, get_user_payload, create_custom_user):
    """POST. Create a user with 'id' parameter significantly bigger than current autogenerated value"""
    new_user_body = get_user_payload
    new_user_body["id"] = fake.number(20)

    response = create_custom_user(new_user_body)
    # this could be prevented by excluding 'id' param from entity scheme
    Verify.equals(400, response.status,
                  f"Backend does not handle extra large 'id' cases. Response message:'{response.json['message']}'")
    new_user_body["id"] = response.json["message"] + fake.number(7)


def test_put_incorrect_user(pet_store_api, create_user, get_user_payload):
    """PUT. Update user with incorrect field type (send userStatus as string)"""
    _response, body = create_user
    body["userStatus"] = fake.word()
    user_name = body["username"]

    log.info(f"PUT not existed user ('{user_name}')")
    response = pet_store_api.put_user(body=body, user_name=user_name)
    Verify.equals(400, response.status,
                  f"Backend does not handle incorrect field format cases. "
                  f"Response message:'{response.json['message']}'")

    log.info("Verify created user (by GET request)")
    get_usr_response = pet_store_api.get_user_by_name(name=user_name)
    Verify.equals(200, get_usr_response.status, "GET created user response status code is incorrect")
    Verify.equals(body, get_usr_response.json,
                  f"User {user_name} was affected with incorrect request (userStatus sent as string)")

