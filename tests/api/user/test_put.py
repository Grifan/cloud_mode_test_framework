from utils.helpers.validator import Verify
from utils.helpers.loger import log


def test_put_user(pet_store_api, create_user, get_user_payload):
    """PUT updated user"""
    _, body = create_user
    old_user_name = body["username"]
    old_user_id = body["id"]

    updated_body = get_user_payload
    updated_body["id"] = old_user_id
    updated_body["username"] = old_user_name

    log.info(f"Update user by its name ('{old_user_name}')")
    response = pet_store_api.put_user(body=updated_body, user_name=old_user_name)
    Verify.equals(200, response.status, "PUT user response status code is incorrect")
    Verify.dict_contains_key("message", response.json,
                             "Put response json does not contain expected 'message' field")
    Verify.equals(response.json["message"], str(updated_body["id"]), "'message' field value is incorrect")

    log.info("Verify that user was updated")
    get_response = pet_store_api.get_user_by_name(name=old_user_name)
    Verify.equals(200, get_response.status, "Get user by name response status code is incorrect")
    Verify.equals(get_response.json, updated_body,
                  "Response json does not equal to expected payload")


def test_put_not_existed_user(pet_store_api, get_user_payload):
    """PUT a new user (no id field and unique user_name)"""
    body = get_user_payload
    body.pop("id")
    user_name = body["username"]

    log.info(f"PUT not existed user ('{user_name}')")
    response = pet_store_api.put_user(body=body, user_name=user_name)
    Verify.equals(200, response.status, "Put user response status code is incorrect")
    Verify.dict_contains_key("message", response.json,
                             "Delete response json does not contain expected 'message' field")
    Verify.true(response.json["message"].isdigit(), "Put response 'message' field not contains autogenerated 'id' value")

    body["id"] = response.json["message"]

    log.info("Verify that user was created")
    get_response = pet_store_api.get_user_by_name(name=user_name)
    Verify.equals(200, get_response.status,  "Get user by name response status code is incorrect")
    Verify.dict_contains_all_keys(get_response.json, list(body.keys()),
                                  "Received user's payload not contains all expected fields")
    Verify.equals(body["email"], get_response.json["email"], "Received user has incorrect email")
